# -*- coding: utf-8 -*-
"""YT-Spam-PR_Term.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dt4Da2sX3VW5jCmYDWSXSeowFjDzST1H
"""

import pandas as pd
from flask import Flask,render_template,url_for,request


app = Flask(__name__)
app.run(debug=True)
@app.route('/')
def home():
	return render_template('home.html')

@app.route('/predict', methods=['POST'])
def predict():
    training_data = []

    #Datasets
    katy = "https://gist.github.com/GunikthegEEk/8c263b9cdeee457fb6fa4f3fbc6956de/raw/1479a7fef5d56d7c9e0328d3731da4d8ef9f7263/katy.csv"
    psy = "https://gist.github.com/GunikthegEEk/8c263b9cdeee457fb6fa4f3fbc6956de/raw/1479a7fef5d56d7c9e0328d3731da4d8ef9f7263/psy.csv"

    shakira = "https://gist.github.com/GunikthegEEk/8c263b9cdeee457fb6fa4f3fbc6956de/raw/1479a7fef5d56d7c9e0328d3731da4d8ef9f7263/shakira.csv"

    df = [katy,psy,shakira]
    for file in df:
        data = pd.read_csv(file)
        training_data.append(data)
    training_data = pd.concat(training_data)

    training_data.info()
    training_data.head()
    training_data['CLASS'].value_counts()

    #Cleaning Dataset
    training_data.info()
    training_data.drop(['COMMENT_ID','AUTHOR','DATE'],axis=1,inplace=True)
    training_data.info()

    import re
    def new_content(content):
        return " ".join(re.findall("[A-Za-z]+",content.lower())) #removing other char than alphabets

    training_data['new_content'] = training_data['CONTENT'].apply(new_content)
    training_data.head()

    #dropping old content col
    training_data.drop(['CONTENT'],axis=1,inplace=True)
    training_data.info()

    from sklearn.model_selection import train_test_split
    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.naive_bayes import MultinomialNB

    df_x = training_data['new_content']
    df_y = training_data.CLASS
    # Extract Feature With CountVectorizer
    corpus = df_x
    cv = CountVectorizer()
    X = cv.fit_transform(corpus)  # Fit the Data

    X_train, X_test, y_train, y_test = train_test_split(X, df_y, test_size=0.33, random_state=42)
    # Naive Bayes Classifier

    clf = MultinomialNB()
    clf.fit(X_train, y_train)
    clf.score(X_test, y_test)

    if request.method == 'POST':
        comment = request.form['comment']
        data = [comment]
        vect = cv.transform(data).toarray()
        my_prediction = clf.predict(vect)
    #comment = "good video"
    data = [comment]
    vect = cv.transform(data).toarray()
    my_prediction = clf.predict(vect)
        
    return render_template('result.html', prediction=my_prediction)

    if __name__ == '__main__':
        app.run(debug=True)




#print(my_prediction)

